using System;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using System.Net;
using System.Xml;
using System.Runtime.InteropServices;
using Alchemy;
using Alchemy.Classes;
using sapi_websocket.synthesizer;
using sapi_websocket.synthesizer.player;

namespace sapi_websocket
{
    /// <summary>
    /// SAPI socket server for speech message output
    /// </summary>
    class Server
    {
        //console close
        [DllImport ("Kernel32")]
        private static extern bool SetConsoleCtrlHandler(EventHandler handler, bool add);
        private delegate bool EventHandler();
        static EventHandler ServerClose;

        private MultiplexSynthesizer speechSynth;
        private WebSocketServer websocket;
        private List<String> actions;

        private static string audioFilePath = System.IO.Path.GetTempPath()+"oe_acc";

        /// <summary>
        /// Constructor intializes speech synthesizer and websocket
        /// </summary>
        public Server()
        {
            actions = new List<String>();
            initSpeech();
            ServerClose += new EventHandler(OnClose);
            SetConsoleCtrlHandler(ServerClose, true);

            try
            {
                initServer();
                Console.WriteLine("Server: initialized and awaiting connections.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Server: Error initializing.");
                Console.WriteLine(e);
            }

        }

        /// <summary>
        /// Initialize speech synthesizer and register playback state events
        /// </summary>
        private void initSpeech()
        {
            Directory.CreateDirectory(audioFilePath);
            speechSynth = new MultiplexSynthesizer();
            speechSynth.StateChanged += new EventHandler<SpeechStateEventArgs>(onStateChanged);
            speechSynth.SpeakStarted += new EventHandler<SpeechStateEventArgs>(onSpeechStart);
            speechSynth.SpeakCompleted += new EventHandler<SpeechStateEventArgs>(onSpeechComplete);
        }

        /// <summary>
        /// Initialize websocket 
        /// </summary>
        private void initServer()
        {
            websocket = new WebSocketServer(81, IPAddress.Any)
            {
                OnReceive = OnRecieve,
                OnConnect = OnConnect,
                OnSend = OnSend,
                OnDisconnect = OnDisconnect
            };
            websocket.Start();

        }

        /// <summary>
        /// Delete external file generated by synthesizer
        /// </summary>
        /// <returns></returns>
        private bool OnClose()
        {
            speechSynth.Close();
            Thread.Sleep(speechSynth.CloseTime);
            return false; 
        }

        /// <summary>
        /// Speech start handler
        /// </summary>
        /// <param name="sender">Dispatch source</param>
        /// <param name="e">Event arguments</param>
        private void onSpeechStart(object sender, SpeechStateEventArgs e)
        {
            pushAction("speak", e.User, e.Duration);
        }

        /// <summary>
        /// Speech complete handler
        /// </summary>
        /// <param name="sender">Dispatch source</param>
        /// <param name="e">Event arguments</param>
        private void onSpeechComplete(object sender, SpeechStateEventArgs e)
        {
            pushAction("complete", e.User, e.Duration);
        }

        /// <summary>
        /// Speech state change handler
        /// </summary>
        /// <param name="sender">Dispatch source</param>
        /// <param name="e">Event arguments</param>
        private void onStateChanged(object sender, SpeechStateEventArgs e)
        {
            Console.WriteLine("User: "+e.User+"  State Change: " + e.State);
        }

        /// <summary>
        /// Client connected to server
        /// </summary>
        /// <param name="context"></param>
        private void OnConnect(UserContext context)
        {
            Console.WriteLine("Server: [" + context.ClientAddress + "] connected.");
        }

        /// <summary>
        /// Client disconnected from server
        /// </summary>
        /// <param name="context"></param>
        private void OnDisconnect(UserContext context)
        {
            Console.WriteLine("Server: [" + context.ClientAddress + "] disconnected.");
            speechSynth.Close();
        }

        /// <summary>
        /// Message received from client
        /// </summary>
        /// <param name="context"></param>
        private void OnRecieve(UserContext context)
        {
            //Console.WriteLine("Server: [" + context.ClientAddress + "] data recieved.");
            processResponse(context.DataFrame.ToString());
            pause();
            String response = "<data>";
            if (actions.Count == 0)
            {
                pushAction("none");
            }
            for (int i = 0; i < actions.Count; i++)
            {
                response += actions[i];
            }
            actions.Clear();
            response += "</data>";
            context.Send(response);
        }

        /// <summary>
        /// Pause thread
        /// </summary>
        private void pause()
        {
            Thread.Sleep(100); //Note: This amount is arbitrary. Change as needed.
        }

        /// <summary>
        /// Server sent message to client
        /// </summary>
        /// <param name="context"></param>
        private void OnSend(UserContext context)
        {
            //Console.WriteLine("Server: [" + context.ClientAddress + "] data sent.");
        }

        /// <summary>
        /// Analyze message for instructions
        /// </summary>
        /// <param name="message">message to anaylyze</param>
        private void processResponse(String message)
        {
            XmlDocument xml = parseXML(message);
            if (xml != null)
            {
                XmlNodeList actions = xml.GetElementsByTagName("action");
                String type;
                String user; 
                foreach (XmlNode node in actions)
                {
                    type = actionType(node);
                    switch (type)
                    {
                        case "speak":
                            user = userId(xml);
                            Console.WriteLine("Speak command");
                            speechSynth.Speak(node.InnerXml);
                            break;
                        case "stop":
                            user = userId(xml);
                            Console.WriteLine("Stop command");
                            pushAction("stop", user);
                            break;
                        case "":
                        default:
                            //Console.WriteLine("Unknown command'"+type+"'");
                            break;
                    }
                }
            }
        }

        /// <summary>
        /// Returns message action type
        /// </summary>
        /// <param name="node">XML node to search for type attribute</param>
        /// <returns>value of type attribute</returns>
        private String actionType(XmlNode node)
        {
            var attr = node.Attributes["type"];
            if (attr != null)
            {
                return attr.Value;
            }
            return "";
        }

        /// <summary>
        /// Returns message user id
        /// </summary>
        /// <param name="node">Message to search for user id</param>
        /// <returns>value of user attribute</returns>
        private String userId(XmlDocument xml)
        {
            XmlNodeList prosody = xml.GetElementsByTagName("prosody");
            XmlAttribute attr;
            foreach (XmlNode node in prosody)
            {
                attr = node.Attributes["user"];
                if (attr != null)
                {
                    return attr.Value;
                }
            }
            return "0";
        }

        /// <summary>
        /// Generate response to send to client
        /// </summary>
        /// <param name="response"></param>
        private void pushAction(String response, String user="0", double duration=0.0)
        {
            actions.Add("<action type=\"" + response + "\" user=\"" + user + "\" duration=\"" + duration + "\"/>");
        }

        /// <summary>
        /// Load message into XML object
        /// </summary>
        /// <param name="data">message to load</param>
        /// <returns>resulting XML</returns>
        private XmlDocument parseXML(String data)
        {
            XmlDocument xml = new XmlDocument();
            try
            {
                xml.LoadXml(data);
            }
            catch (Exception e)
            {
                Console.WriteLine(data.Length);
                Console.WriteLine("Server: Error parsing XML data.");
                Console.WriteLine(e);

            }
            return xml;
        }

        /// <summary>
        /// Temp directory for speech audio files
        /// </summary>
        public static string AudioFilePath { get { return audioFilePath; } }
    }
}
